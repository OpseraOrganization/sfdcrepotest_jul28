<?xml version="1.0" encoding="UTF-8"?>
<CustomObject xmlns="http://soap.sforce.com/2006/04/metadata">
    <validationRules>
        <fullName>CH_CIR</fullName>
        <active>true</active>
        <description>(US:12084) To ensure multiple CIRs are not sent out when the status is Pending Customer</description>
        <errorConditionFormula>AND(
ISPICKVAL(CH_Email_Type__c,&quot;Customer Information Request&quot;),
ISPICKVAL(Parent.Status,&quot;Pending Customer&quot;) 
)</errorConditionFormula>
        <errorMessage>There is still an outstanding CIR. You can use Email Type &quot;Update&quot; to send additional information.</errorMessage>
    </validationRules>
    <validationRules>
        <fullName>CH_CIRwhenDeferralStatusIsActive</fullName>
        <active>true</active>
        <description>A CIR cannot be send when deferral status is Active (US: 20389)</description>
        <errorConditionFormula>AND( 
Parent.CH_RecordTypeCheck__c, 
ISPICKVAL(CH_Email_Type__c,&quot;Customer Information Request&quot;), 
ISPICKVAL( Parent.CH_DeferralStatus__c, &quot;Active&quot;) 
)</errorConditionFormula>
        <errorMessage>Customer Information Requests cannot be sent out when Deferral Status is Active</errorMessage>
    </validationRules>
    <validationRules>
        <fullName>CH_CIRwhenSolutionProvided</fullName>
        <active>true</active>
        <description>A CIR cannot be send when status is Solution Provided (Defect: 13241)</description>
        <errorConditionFormula>AND( 
Parent.CH_RecordTypeCheck__c, 
ISPICKVAL(CH_Email_Type__c,&quot;Customer Information Request&quot;), 
ISPICKVAL(Parent.Status, &quot;Solution Provided&quot;) 
)</errorConditionFormula>
        <errorMessage>A CIR cannot be send when the Case Status is Solution Provided</errorMessage>
    </validationRules>
    <validationRules>
        <fullName>CH_Casehastobeassigned</fullName>
        <active>true</active>
        <description>(US:13241) Case has to be assigned prior to sending emails</description>
        <errorConditionFormula>AND ( 
	Parent.CreatedDate!=Parent.LastModifiedDate,
 Parent.CH_RecordTypeCheck__c,  
 ISBLANK(Parent.CH_AssignedDate__c)
)</errorConditionFormula>
        <errorDisplayField>CH_Email_ActualTimestamp__c</errorDisplayField>
        <errorMessage>Related Incident/Problem has to be assigned prior to sending an email</errorMessage>
    </validationRules>
    <validationRules>
        <fullName>CH_DontAllowRestorewhenNotIncident</fullName>
        <active>true</active>
        <description>(US:12084) This validation rule will ensure that a Restore Email can only be send when the Record Type is a Nokia Incident with Restoration (0121F000000Bj7JQAS)</description>
        <errorConditionFormula>AND(NOT(Parent.RecordType.Name=&quot;Nokia Incident with Restoration&quot;),ISPICKVAL(CH_Email_Type__c, &quot;Restoration&quot;))</errorConditionFormula>
        <errorMessage>A Restore Email can only be send when the case requires a restoration.</errorMessage>
    </validationRules>
    <validationRules>
        <fullName>CH_Email_NeedsType</fullName>
        <active>false</active>
        <description>(US:12084) Each outbound Email requires a type when it has one of the CH record types</description>
        <errorConditionFormula>AND(Parent.CreatedDate!=Parent.LastModifiedDate,Parent.CH_RecordTypeCheck__c = TRUE,ISPICKVAL(CH_Email_Type__c,&quot;&quot;))</errorConditionFormula>
        <errorMessage>Each outbound email needs to have a type</errorMessage>
    </validationRules>
    <validationRules>
        <fullName>CH_FirstQualifyCIR</fullName>
        <active>true</active>
        <description>(Defect: 14583) Before sending out an email like IR, Restore, (Temp) Sol Prov. A CIR must first be qualified</description>
        <errorConditionFormula>AND(
ISPICKVAL(Parent.Status, &apos;Pending Customer&apos;),
Parent.CH_RecordTypeCheck__c,
OR(
ISPICKVAL(CH_Email_Type__c, &apos;Initial Response&apos;),
ISPICKVAL(CH_Email_Type__c, &apos;Restoration&apos;),
ISPICKVAL(CH_Email_Type__c, &apos;Temporary Solution Provided&apos;),
ISPICKVAL(CH_Email_Type__c, &apos;Solution Provided&apos;),
ISPICKVAL(CH_Email_Type__c, &apos;Cause Analysis Report&apos;),
ISPICKVAL(CH_Email_Type__c, &apos;Service Disruption Report&apos;)
))</errorConditionFormula>
        <errorMessage>Prior to sending out a new email, the existing CIR needs to be qualified. The Email Type &apos;Update&apos; can be used.</errorMessage>
    </validationRules>
    <validationRules>
        <fullName>CH_IRbeforeCIR</fullName>
        <active>true</active>
        <description>An Initial Response has to be provided prior to request a CIR (Defect: 13241)</description>
        <errorConditionFormula>AND( 
Parent.CH_RecordTypeCheck__c, 
ISPICKVAL(CH_Email_Type__c,&quot;Customer Information Request&quot;), 
NOT(Parent.CH_IsCompleteInitialResponse__c) 
)</errorConditionFormula>
        <errorMessage>Please perform an Initial Response prior to requesting a CIR</errorMessage>
    </validationRules>
    <validationRules>
        <fullName>CH_IRbeforeRestore</fullName>
        <active>true</active>
        <description>An Initial Response has to be provided prior to doing a restore. (Defect: 13241)</description>
        <errorConditionFormula>AND(
Parent.CH_RecordTypeCheck__c,
ISPICKVAL(CH_Email_Type__c,&quot;Restore&quot;),
NOT(Parent.CH_IsCompleteInitialResponse__c)
)</errorConditionFormula>
        <errorMessage>Please perform an Initial Response prior to providing a Restore.</errorMessage>
    </validationRules>
    <validationRules>
        <fullName>CH_IRbeforeSDR</fullName>
        <active>true</active>
        <description>An Initial Response has to be provided prior to an SDR (Defect: 13241)</description>
        <errorConditionFormula>AND( 
Parent.CH_RecordTypeCheck__c, 
ISPICKVAL(CH_Email_Type__c,&quot;Service Disruption Report&quot;), 
NOT(Parent.CH_IsCompleteInitialResponse__c) 
)</errorConditionFormula>
        <errorMessage>Please perform an Initial Response prior to providing an SDR.</errorMessage>
    </validationRules>
    <validationRules>
        <fullName>CH_IRbeforeSolution</fullName>
        <active>true</active>
        <description>An Initial Response has to be provided prior to a Solution (Defect: 13241)</description>
        <errorConditionFormula>AND( 
Parent.CH_RecordTypeCheck__c, 
ISPICKVAL(CH_Email_Type__c,&quot;Solution Provided&quot;), 
NOT(Parent.CH_IsCompleteInitialResponse__c) 
)</errorConditionFormula>
        <errorMessage>Please perform an Initial Response prior to providing a Solution.</errorMessage>
    </validationRules>
    <validationRules>
        <fullName>CH_IRbeforeTemporarySolution</fullName>
        <active>true</active>
        <description>An Initial Response has to be provided prior to providing a Temporary Solution (Defect: 13241)</description>
        <errorConditionFormula>AND( 
Parent.CH_RecordTypeCheck__c, 
ISPICKVAL(CH_Email_Type__c,&quot;Temporary Solution Provided&quot;), 
NOT(Parent.CH_IsCompleteInitialResponse__c) 
)</errorConditionFormula>
        <errorMessage>Please perform an Initial Response prior to providing a Temporary Solution</errorMessage>
    </validationRules>
    <validationRules>
        <fullName>CH_PreventCIR</fullName>
        <active>true</active>
        <description>NOKIASC-20255: Need to fill Internal Status before sending CIR</description>
        <errorConditionFormula>AND(Parent.CH_RecordTypeCheck__c,
 ISPICKVAL(CH_Email_Type__c, &apos;Customer Information Request&apos;), 
 NOT( OR (ISPICKVAL(Parent.CH_InternalStatus__c, &apos;Pending Approval&apos; ),
                ISPICKVAL(Parent.CH_InternalStatus__c, &apos;Pending HW Delivery&apos; ),
				ISPICKVAL(Parent.CH_InternalStatus__c, &apos;Pending HW Replacement&apos; ),
				ISPICKVAL(Parent.CH_InternalStatus__c, &apos;Pending Reoccurence&apos; ),
				ISPICKVAL(Parent.CH_InternalStatus__c, &apos;Customer Implementation in Progress&apos; ),
				ISPICKVAL(Parent.CH_InternalStatus__c, &apos;Pending Customer Implementation&apos; ),
				ISPICKVAL(Parent.CH_InternalStatus__c, &apos;Pending Customer Information&apos; ),
				ISPICKVAL(Parent.CH_InternalStatus__c, &apos;Work Suspended by Customer&apos; ),
				ISPICKVAL(Parent.CH_InternalStatus__c, &apos;Pending Remote Access&apos; ),
				ISPICKVAL(Parent.CH_InternalStatus__c, &apos;Pending Customer Planned MW&apos; ),
				ISPICKVAL(Parent.CH_InternalStatus__c, &apos;Pending Field Service&apos; ))))</errorConditionFormula>
        <errorMessage>Please fill internal status with the correct value before sending CIR.</errorMessage>
    </validationRules>
    <validationRules>
        <fullName>CH_Restoration_Method_Provided</fullName>
        <active>true</active>
        <description>Restoration Method needs to be provided if Email Type is &quot;Restoration&quot;</description>
        <errorConditionFormula>AND(
ISBLANK(Parent.CH_RestorationMethod__c),
ISPICKVAL(CH_Email_Type__c,&quot;Restoration&quot;)
)</errorConditionFormula>
        <errorDisplayField>CH_Email_Type__c</errorDisplayField>
        <errorMessage>Please fill the restoration method before sending email with restoration type</errorMessage>
    </validationRules>
    <validationRules>
        <fullName>CH_Restore</fullName>
        <active>true</active>
        <description>(US:12084)To ensure that a restore is only provided when the restoration date has not been set</description>
        <errorConditionFormula>AND(
NOT(ISBLANK(Parent.CH_SystemRestored__c)),
ISPICKVAL(CH_Email_Type__c,&quot;Restoration&quot;),
NOT(CH_Email_PhoneCall__c)
)</errorConditionFormula>
        <errorMessage>A restore has already been recorded. You can use Email Type &quot;Update&quot; to send additional information.</errorMessage>
    </validationRules>
    <validationRules>
        <fullName>CH_RestorebeforeSDR</fullName>
        <active>true</active>
        <description>A Restore has to be provided prior to an SDR (Defect: 13241)</description>
        <errorConditionFormula>AND( 
Parent.CH_RecordTypeCheck__c, 
ISPICKVAL(CH_Email_Type__c,&quot;Service Disruption Report&quot;), 
NOT(Parent.CH_IsCompleteRestore__c)
)</errorConditionFormula>
        <errorMessage>Please perform a Restore prior to providing an SDR.</errorMessage>
    </validationRules>
    <validationRules>
        <fullName>CH_SDR_Provided</fullName>
        <active>true</active>
        <description>(US:12084)SDR already has been provided</description>
        <errorConditionFormula>AND( 
Parent.CH_IsCompleteServiceDisruptionReport__c, 
ISPICKVAL(CH_Email_Type__c,&quot;Service Disruption Report&quot;)
)</errorConditionFormula>
        <errorMessage>SDR has already been provided. You can use Email Type &quot;Update&quot; to send additional information.</errorMessage>
    </validationRules>
    <validationRules>
        <fullName>CH_SolutionEmpty</fullName>
        <active>true</active>
        <description>(US:12084)Solution is empty</description>
        <errorConditionFormula>AND(
ISPICKVAL(CH_Email_Type__c,&quot;Solution Provided&quot;),
LEN(Parent.CH_SolutionDetails__c) = 0
)</errorConditionFormula>
        <errorMessage>The Solution Field is Empty</errorMessage>
    </validationRules>
    <validationRules>
        <fullName>CH_Solution_Provided</fullName>
        <active>true</active>
        <description>(US:12084)Solution Provided already has been provided</description>
        <errorConditionFormula>AND(
NOT(ISBLANK(Parent.CH_SolutionProvided__c)),
ISPICKVAL(CH_Email_Type__c,&quot;Solution Provided&quot;)
)</errorConditionFormula>
        <errorMessage>Solution has already been provided. You can use Email Type &quot;Update&quot; to send additional information.</errorMessage>
    </validationRules>
    <validationRules>
        <fullName>CH_SolutionbeforeRestore</fullName>
        <active>true</active>
        <description>A Solution can only be provided after a restore has been done (taking into account cases without restore) (Defect: 13241)</description>
        <errorConditionFormula>AND( 
Parent.RecordType.Name = &quot;Nokia Incident with Restoration&quot;, 
ISPICKVAL(CH_Email_Type__c,&quot;Solution Provided&quot;), 
NOT(Parent.CH_IsCompleteRestore__c) 
)</errorConditionFormula>
        <errorMessage>Please perform a Restore prior to providing a Solution.</errorMessage>
    </validationRules>
    <validationRules>
        <fullName>CH_SupportEmailAddressinTO</fullName>
        <active>true</active>
        <description>(Defect: NOKIASC-15242) this ensures that emails are not sent from Salesforce back to Salesforce. This validation rule will take into account the CH profiles (Agent, Basic Case Handling and Case Handler)</description>
        <errorConditionFormula>AND(
Parent.CH_RecordTypeCheck__c,
ISPICKVAL(Status, &quot;Sent&quot;),
OR(
ToAddress = &quot;support.servicesdev@nokia.com&quot;,
ToAddress = &quot;support.servicesqa@nokia.com&quot;,
ToAddress = &quot;support.servicesuat@nokia.com&quot;,
ToAddress = &quot;support.services@nokia.com&quot;
),
OR(
$Profile.Name  = &apos;CH_Agent&apos;,
$Profile.Name  = &apos;CH_Basic Case Handling&apos;,
$Profile.Name  = &apos;CH_Case Handler&apos;
))</errorConditionFormula>
        <errorMessage>TO Address cannot be the Nokia Support Email Address</errorMessage>
    </validationRules>
    <validationRules>
        <fullName>CH_TempSolApplicable</fullName>
        <active>true</active>
        <description>(US:12084) Ensure that Temporary Solution is applicable</description>
        <errorConditionFormula>AND( 
ISPICKVAL(CH_Email_Type__c,&quot;Temporary Solution Provided&quot;), 
Parent.CH_TemporarySolutionNotApplicable__c 
)</errorConditionFormula>
        <errorMessage>Temporary Solution is not applicable</errorMessage>
    </validationRules>
    <validationRules>
        <fullName>CH_TemporarySolutionEmpty</fullName>
        <active>true</active>
        <description>(US:12084) Ensure that the Temporary Solution Field is not empty.</description>
        <errorConditionFormula>AND(
ISPICKVAL(CH_Email_Type__c,&quot;Temporary Solution Provided&quot;),
LEN(Parent.CH_TemporarySolution__c) = 0
)</errorConditionFormula>
        <errorMessage>Temporary Solution Field is empty.</errorMessage>
    </validationRules>
    <validationRules>
        <fullName>CH_TemporarySolutionbeforeRestore</fullName>
        <active>true</active>
        <description>A Temporary Solution can only be provided after a restore has been done (taking into account cases without restore) (Defect: 13241)</description>
        <errorConditionFormula>AND( 
Parent.RecordType.Name = &quot;Nokia Incident with Restoration&quot;, 
ISPICKVAL(CH_Email_Type__c,&quot;Temporary Solution Provided&quot;), 
NOT(Parent.CH_IsCompleteRestore__c) 
)</errorConditionFormula>
        <errorMessage>Please perform a Restore prior to providing a Temporary Solution.</errorMessage>
    </validationRules>
    <validationRules>
        <fullName>CH_Temporary_Solution</fullName>
        <active>true</active>
        <description>(US:12084) Ensure that Temporary Solution is only selected when the Temporary Solution date is not set</description>
        <errorConditionFormula>AND(
NOT(ISBLANK(Parent.CH_TemporarySolutionProvided__c)),
ISPICKVAL(CH_Email_Type__c,&quot;Temporary Solution Provided&quot;) 
)</errorConditionFormula>
        <errorMessage>Temporary solution has already been provided. You can use Email Type &quot;Update&quot; to send additional information.</errorMessage>
    </validationRules>
</CustomObject>
